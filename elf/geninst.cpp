#include <string>
#include <vector>

struct Pattern
{
	enum Type
	{
		BIN_reg_int,
		BIN_reg_reg,
	};

	Pattern( Type t, int oc ):
		type_(t),
		opcode_(oc)
	{}

	Type	type_;
	int 	opcode_;
};

struct Instruction
{
	Instruction( const char * mnemonic, const std::vector<int> & v ):
		mnemonic_(mnemonic),
		patterns_(v)
	{
	}

	std::vector<int>	patterns_;
	std::string			mnemonic_;
};

Instruction instructions[] = 
{
	{"ADC", {0} },
	{"ADD", {0,1} },
	{"AND", {0,1} },
	{"BSF", {0,1} },
	{"BSR", {0,1} },
	{"BSWAP", {0,1} },
	{"BT", {0,1} },
	{"BTC", {0,1} },
	{"BTR", {0,1} },
	{"BTS", {0,1} },
	{"CALL", {0,1} },
	{"CBW", {0,1} },
	{"CDQ", {0,1} },
	{"CDQE", {0,1} },
	{"CLC", {0,1} },
	{"CLD", {0,1} },
	{"CLI", {0,1} },
	{"CLTS", {0,1} },
	{"CMC", {0,1} },
	{"CMP", {0,1} },
	{"CMPS", {0,1} },
	{"CMPSB", {0,1} },
	{"CMPSW", {0,1} },
	{"CMPSD", {0,1} },
	{"CMPSQ", {0,1} },
	{"CMPXCHG", {0,1} },
	{"CPUID", {0,1} },
	{"CQO", {0,1} },
	{"CWD", {0,1} },
	{"CWDE", {0,1} },
	{"DEC", {0,1} },
	{"DIV", {0,1} },
	{"ENTER", {0,1} },
	{"HLT", {0,1} },
	{"IDIV", {0,1} },
	{"IMUL", {0,1} },
	{"IN", {0,1} },
	{"INC", {0,1} },
	{"INS", {0,1} },
	{"INT", {0,1} },
	{"INT n", {0,1} },
	{"INTO", {0,1} },
	{"INVD", {0,1} },
	{"INVLPG", {0,1} },
	{"INVPCID", {0,1} },
	{"IRETO", {0,1} },
	{"Jcc", {0,1} },
	{"JCXZ", {0,1} },
	{"JECXZ", {0,1} },
	{"JMP", {0,1} },
	{"LAR", {0,1} },
	{"LDTR", {0,1} },
	{"LEA", {0,1} },
	{"LEAVE", {0,1} },
	{"LFS", {0,1} },
	{"LGDT", {0,1} },
	{"LGS", {0,1} },
	{"LIDT", {0,1} },
	{"LLDT", {0,1} },
	{"LMSW", {0,1} },
	{"LOCK", {0,1} },
	{"LODS", {0,1} },
	{"LODSB", {0,1} },
	{"LODSW", {0,1} },
	{"LODSD", {0,1} },
	{"LODSQ", {0,1} },
	{"LOOP", {0,1} },
	{"LOOPE", {0,1} },
	{"LOOPNE", {0,1} },
	{"LOOPNZ", {0,1} },
	{"LSL", {0,1} },
	{"LSS", {0,1} },
	{"LTR", {0,1} },
	{"MOV", {0,1} },
	{"MOVBE", {0,1} },
	{"MOVS", {0,1} },
	{"MOVSB", {0,1} },
	{"MOVSW", {0,1} },
	{"MOVSD", {0,1} },
	{"MOVSQ", {0,1} },
	{"MOVSX", {0,1} },
	{"MOVSXD", {0,1} },
	{"MOVZX", {0,1} },
	{"MUL", {0,1} },
	{"NEG", {0,1} },
	{"NOP", {0,1} },
	{"NOT", {0,1} },
	{"OR", {0,1} },
	{"OUT", {0,1} },
	{"OUTS", {0,1} },
	{"POP", {0,1} },
	{"POPF", {0,1} },
	{"POPFQ", {0,1} },
	{"PUSH", {0,1} },
	{"PUSHF", {0,1} },
	{"PUSHFD", {0,1} },
	{"RCL", {0,1} },
	{"RCR", {0,1} },
	{"RDMSR", {0,1} },
	{"RDPMC", {0,1} },
	{"RDTSC", {0,1} },
	{"RDTSCP", {0,1} },
	{"REPE CMPS", {0,1} },
	{"REPE SCAS", {0,1} },
	{"REP INS", {0,1} },
	{"REP LODS", {0,1} },
	{"REP MOVS", {0,1} },
	{"REPNE CMPS", {0,1} },
	{"REPNE SCAS", {0,1} },
	{"REP OUTS", {0,1} },
	{"REP STOS", {0,1} },
	{"RET", {0,1} },
	{"ROL", {0,1} },
	{"ROR", {0,1} },
	{"RSM", {0,1} },
	{"SAL", {0,1} },
	{"SAR", {0,1} },
	{"SBB", {0,1} },
	{"SCAS", {0,1} },
	{"SCASB", {0,1} },
	{"SCASW", {0,1} },
	{"SCASD", {0,1} },
	{"SETcc ", {0,1} },
	{"SGDT ", {0,1} },
	{"SHL", {0,1} },
	{"SHLD", {0,1} },
	{"SHR", {0,1} },
	{"SHRD", {0,1} },
	{"SIDT", {0,1} },
	{"SLDT", {0,1} },
	{"SMSW", {0,1} },
	{"STC", {0,1} },
	{"STD", {0,1} },
	{"STI", {0,1} },
	{"STOS", {0,1} },
	{"STOSB", {0,1} },
	{"STOSW", {0,1} },
	{"STOSD", {0,1} },
	{"STOSQ", {0,1} },
	{"STR", {0,1} },
	{"SUB", {0,1} },
	{"SWAPGS", {0,1} },
	{"SYSCALL", {0,1} },
	{"SYSRET", {0,1} },
	{"TEST", {0,1} },
	{"UD2", {0,1} },
	{"VERR", {0,1} },
	{"VERW", {0,1} },
	{"WAIT", {0,1} },
	{"WBINVD", {0,1} },
	{"WRMSR", {0,1} },
	{"XADD ", {0,1} },
	{"XCHG", {0,1} },
	{"XLAT", {0,1} },
	{"XLATB", {0,1} },
	{"XOR", {0,1} },
};


int main( int argc, char * argv[] )
{
	return 0;
}
